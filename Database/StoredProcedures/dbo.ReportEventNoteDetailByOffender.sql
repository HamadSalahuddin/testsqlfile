/*
Script generated by Aqua Data Studio 8.0.2 on Jan-15-2010 01:50:27 PM
Database: TrackerPal
Schema: <All Schemas>
Objects: PROCEDURE
*/
CREATE PROCEDURE [ReportEventNoteDetailByOffender]

	@StartDate		DATETIME,
	@EndDate		DATETIME,
	@AgencyID       INT,
    @OfficerID      INT,
	@OffenderID		INT,
	@TimeZoneOffset INT

AS
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
		SELECT	TOP 5000
				--oon.note as 'OperatorNote',
				ag.Agency,
				a.OffenderID,
				ISNULL(officer.FirstName + ' ', '') + 
				ISNULL(officer.MiddleName + ' ', '') + 
				ISNULL(officer.LastName, '') AS 'OfficerName',
				ISNULL(o.FirstName + ' ', '') + 
				ISNULL(o.MiddleName + ' ', '') + 
				ISNULL(o.LastName, '') AS 'OffenderName',
				a.AlarmID, --a.AlarmTypeID, 
				DATEADD(mi, @TimeZoneOffset, (Convert(DateTime,a.EventDisplayTime))) as EventTime,
				et.longname as alarmName, 
				ISNULL(g.GeoRuleName, '') AS 'GeoRuleName',
				ISNULL(ROUND(a.Longitude,5), 0) AS 'Longitude',
				ISNULL(ROUND(a.Latitude,5), 0) AS 'Latitude',
				ISNULL(e.Address, 'unavailable') AS 'Address',
				ISNULL(ap.Protocol, '') AS 'Protocol',
				'AlarmNote:' + '' + an.Note as Note,
				u.UserName,
				ut.UserType,
				DATEADD(mi, @TimeZoneOffset, (Convert(DateTime,an.CreatedDate))) as CreatedDate,
                                case when dbo.fnIsAlarmAutoCompleted(e.AlarmID) > 0 then 'Autocompleted Alarms' 
					  else 'Regular Alarms' end as 'IsAlarmsAutoCompleted'
			INTO #ReportsAlarmNote
		FROM	AlarmNote an
				INNER JOIN Alarm a on a.Alarmid = an.Alarmid 
				inner join fnAllEvents() e ON e.AlarmID = a.AlarmID
				left join EventType et on et.EventTypeID = a.EventTypeID
				LEFT JOIN Offender o ON a.OffenderID = o.OffenderID
				left JOIN Offender_Officer oo ON o.OffenderID = oo.OffenderID
				left join officer  on officer.OfficerID = oo.OfficerID 
				Left join Agency ag on ag.AgencyID = officer.AgencyID
				left Join [user] u on u.Userid = an.createdbyID
				--left join OffenderOperatorNote oon on  oon.OffenderID = a.OffenderID
				left Join userType ut on u.UserTypeid = ut.UserTypeID
				left join AlarmProtocol ap on a.EventTypeID = ap.EventTypeID and 
						ap.AgencyID = ag.AgencyID and 
						ap.OffenderID = a.OffenderID
				left join GeoRule g on g.GeoRuleID = a.EventParameter and (a.eventtypeId<280 or a.eventtypeId>283 )
		WHERE	--a.AlarmID NOT IN (SELECT AlarmID FROM AlarmAcknowledgement)and
				(
					( @StartDate = 0 AND @EndDate = 0) 
					or
					(a.EventDisplayTime >= @StartDate AND a.EventDisplayTime <= @EndDate)
				)
				and
	            (
					(@AgencyID= 0)
					or
					(o.AgencyID = @AgencyID)
				)
			    and
	        	(
					(@OfficerID= 0)
					or
					(oo.OfficerID = @OfficerID)
				)
				and
				(
					(@OffenderID = 0)
					or
					(a.OffenderID = @OffenderID)
				)
	ORDER BY IsAlarmsAutoCompleted, a.EventTime ASC, a.AlarmID ASC

	SELECT	TOP 5000
				--oon.note as 'OperatorNote',
				ag.Agency,
				a.OffenderID,
				ISNULL(officer.FirstName + ' ', '') + 
				ISNULL(officer.MiddleName + ' ', '') + 
				ISNULL(officer.LastName, '') AS 'OfficerName',
				ISNULL(o.FirstName + ' ', '') + 
				ISNULL(o.MiddleName + ' ', '') + 
				ISNULL(o.LastName, '') AS 'OffenderName',
				a.AlarmID, --a.AlarmTypeID, 
				DATEADD(mi, @TimeZoneOffset, (Convert(DateTime,a.EventDisplayTime))) as EventTime,
				et.AbbrevEventType as alarmName, 
				ISNULL(g.GeoRuleName, '') AS 'GeoRuleName',
				ISNULL(ROUND(a.Longitude,5), 0) AS 'Longitude',
				ISNULL(ROUND(a.Latitude,5), 0) AS 'Latitude',
				ISNULL(e.Address, 'unavailable') AS 'Address',
				ISNULL(ap.Protocol, '') AS 'Protocol',
				'EventNote:' + ' ' + en.Note as Note,
				u.UserName,
				ut.UserType,
				DATEADD(mi, @TimeZoneOffset, (Convert(DateTime,en.CreatedDate))) as CreatedDate,
                                case when dbo.fnIsAlarmAutoCompleted(e.AlarmID) > 0 then 'Autocompleted Alarms' 
					  else 'Regular Alarms' end as 'IsAlarmsAutoCompleted'
			INTO #ReportsEventNote
		FROM	EventNote en
				INNER JOIN Alarm a on a.Eventtime = en.Eventtime and a.trackerid = en.deviceid and a.eventtypeid = en.eventid
				inner join fnAllEvents() e ON e.AlarmID = a.AlarmID
				left join EventType et on et.EventTypeID = a.EventTypeID
				LEFT JOIN Offender o ON a.OffenderID = o.OffenderID
				left JOIN Offender_Officer oo ON o.OffenderID = oo.OffenderID
				left join officer  on officer.OfficerID = oo.OfficerID 
				Left join Agency ag on ag.AgencyID = officer.AgencyID
				left Join [user] u on u.Userid = en.createdbyID
				--left join OffenderOperatorNote oon on  oon.OffenderID = a.OffenderID
				left Join userType ut on u.UserTypeid = ut.UserTypeID
				left join AlarmProtocol ap on a.EventTypeID = ap.EventTypeID and 
						ap.AgencyID = ag.AgencyID and 
						ap.OffenderID = a.OffenderID
				left join GeoRule g on g.GeoRuleID = a.EventParameter and (a.eventtypeId<280 or a.eventtypeId>283 )
		WHERE	--a.AlarmID NOT IN (SELECT AlarmID FROM AlarmAcknowledgement)and
				(
					( @StartDate = 0 AND @EndDate = 0) 
					or
					(a.EventDisplayTime >= @StartDate AND a.EventDisplayTime <= @EndDate)
				)
				and
	            (
					(@AgencyID= 0)
					or
					(o.AgencyID = @AgencyID)
				)
			    and
	        	(
					(@OfficerID= 0)
					or
					(oo.OfficerID = @OfficerID)
				)
				and
				(
					(@OffenderID = 0)
					or
					(a.OffenderID = @OffenderID)
				)
	ORDER BY IsAlarmsAutoCompleted, a.EventTime ASC, a.AlarmID ASC

	SELECT * FROM #ReportsAlarmNote
	union
	SELECT * FROM #ReportsEventNote

GO
GRANT EXECUTE ON [ReportEventNoteDetailByOffender] TO [db_dml]
GO
GRANT VIEW DEFINITION ON [ReportEventNoteDetailByOffender] TO [db_object_def_viewers]
GO
