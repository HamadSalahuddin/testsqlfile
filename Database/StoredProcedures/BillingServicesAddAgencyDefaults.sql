/*
Script generated by Aqua Data Studio 8.0.2 on Jan-15-2010 01:50:27 PM
Database: TrackerPal
Schema: <All Schemas>
Objects: PROCEDURE
*/
CREATE PROCEDURE [BillingServicesAddAgencyDefaults] @AgencyID INT
AS
--Procedure assings default values for an agency's billing services
SET NOCOUNT ON;

--Check for latent transcations.
IF @@TRANCOUNT > 0
	BEGIN
		ROLLBACK TRANSACTION
	END;
DECLARE @TranTrak INT;

BEGIN TRY
	BEGIN TRANSACTION;
	INSERT INTO BillingService(CreatedByID,CreatedDate,AgencyID,StartDateTime,BillingServiceTypeID)
	SELECT CreatedByID,GETDATE(),@AgencyID,GETDATE(),BillingServiceTypeID
	FROM dbo.BillingService
	WHERE AgencyID = dbo.fnGetTemplateAgencyID();
	SET @TranTrak = 1;
	COMMIT TRAN;

	BEGIN TRANSACTION;
	INSERT INTO classicbillingservice(BillingServiceID, ServiceID)
	SELECT b.ID,cs.ServiceID
	FROM dbo.classicbillingservice cs
	INNER JOIN BillingService bs ON cs.BillingServiceID = bs.ID
	CROSS JOIN
	(SELECT ID
	 FROM BillingService
	 WHERE AgencyID = @AgencyID) b
	WHERE bs.AgencyID = dbo.fnGetTemplateAgencyID();
	SET @TranTrak = 2;
	COMMIT TRAN;
	
	BEGIN TRANSACTION;
	INSERT INTO BillingServiceOption(isRequired,IsOptional,BillingServiceID)
	SELECT o.IsRequired,o.IsOptional,b.ID
	FROM BillingServiceOption o 
	INNER JOIN BillingService bs ON o.BillingServiceID = bs.ID
	CROSS JOIN
	(SELECT ID
	 FROM BillingService
	 WHERE AgencyID = @AgencyID) b
	WHERE bs.AgencyID = dbo.fnGetTemplateAgencyID();
	SET @TranTrak = 3;
	COMMIT TRAN;

	BEGIN TRANSACTION;
	INSERT INTO BillingServiceOptionReportingInterval(BillingServiceOptionID,ReportingIntervalID,Cost)
	SELECT o.ID, ri.ReportingIntervalID,ri.Cost
	FROM BillingServiceOptionReportingInterval ri
	INNER JOIN (SELECT bso.ID
				FROM BillingServiceOption bso WITH(NOLOCK)
				INNER JOIN (SELECT ID 
							FROM BillingService WITH(NOLOCK)
							WHERE AgencyID = dbo.fnGetTemplateAgencyID()) bs ON bso.BillingServiceID = bs.ID) oi ON ri.BillingServiceOptionID = oi.ID
	INNER JOIN (SELECT bso2.ID
				FROM BillingServiceOption bso2 WITH(NOLOCK)
				INNER JOIN(SELECT BillingService.ID
						   FROM BillingService WITH(NOLOCK)
						   WHERE AgencyID = @AgencyID) bs2 ON bso2.BillingServiceID = bs2.ID) o ON ri.BillingServiceOptionID != o.ID
	SET @TranTrak = 4;
	COMMIT TRAN;

END TRY
BEGIN CATCH
	--Catch and return error.
    SELECT 
        ERROR_NUMBER() AS ErrorNumber,
        ERROR_SEVERITY() AS ErrorSeverity,
        ERROR_STATE() as ErrorState,
        ERROR_PROCEDURE() as ErrorProcedure,
        ERROR_LINE() as ErrorLine,
        ERROR_MESSAGE() as ErrorMessage;

	--Delete committed data if there is any.
	IF @TranTrak = 3
		BEGIN
			DELETE
			FROM BillingServiceOption
			WHERE BillingServiceID IN (SELECT ID FROM BillingService WHERE AgencyID = @AgencyID);
		END;
	
	IF @TranTrak >= 1
		BEGIN
			DELETE
			FROM BillingService
			WHERE AgencyID = @AgencyID;
		END;

	--Rollback outstanding transactions.
	IF @@TRANCOUNT > 0
		BEGIN
			ROLLBACK TRANSACTION
		END;
END CATCH;

IF @@TRANCOUNT > 0
	BEGIN
		COMMIT TRANSACTION
	END;

GO
GRANT EXECUTE ON [BillingServicesAddAgencyDefaults] TO [db_dml]
GO
