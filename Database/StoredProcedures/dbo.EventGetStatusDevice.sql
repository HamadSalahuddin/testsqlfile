/*
Script generated by Aqua Data Studio 8.0.2 on Jan-15-2010 01:50:27 PM
Database: TrackerPal
Schema: <All Schemas>
Objects: PROCEDURE
*/
CREATE PROCEDURE [EventGetStatusDevice] (
	@EventTime BIGINT,
	@DeviceID  INT,
	@EventID   INT
)
AS

-- // Declare Var's // --
DECLARE @EventDateTime DATETIME,
        @TrackerVersion INT,
        @ExtBatteryFullVoltage INT,
        @ExtBatteryEmptyVoltage INT,
        @IntBatteryFullVoltage INT,
        @IntBatteryEmptyVoltage INT

-- // Convert the EventTime to something useable // --
SET @EventDateTIME = dbo.ConvertLongToDate(@EventTime)

-- // Get the Device Type // --
SET @TrackerVersion = (SELECT MAX(TrackerVersion) FROM Tracker WHERE TrackerID = @DeviceID)

-- // Set Battery Full/Empty Values based on TrackerVersion // --
IF ((@TrackerVersion <= 4) OR (@TrackerVersion IS NULL)) -- Classic OTD / Unknown
  BEGIN
    SET @ExtBatteryFullVoltage = 4200
    SET @ExtBatteryEmptyVoltage = (SELECT Gateway.dbo.HexToSmallInt(PropertyValue) FROM Gateway.dbo.DeviceProperties WHERE DeviceID = @DeviceID AND PropertyID = '8041')
    SET @IntBatteryFullVoltage = 4200
    SET @IntBatteryEmptyVoltage = (SELECT Gateway.dbo.HexToSmallInt(PropertyValue) FROM Gateway.dbo.DeviceProperties WHERE DeviceID = @DeviceID AND PropertyID = '8051')
  END
   
IF (@TrackerVersion = 5)  -- eArrest OTD (Parallel)
  BEGIN
    SET @ExtBatteryFullVoltage = -1   -- There is no ExternalBattery on TP2's
    SET @ExtBatteryEmptyVoltage = -1
    SET @IntBatteryFullVoltage = 4200
    SET @IntBatteryEmptyVoltage = (SELECT Gateway.dbo.HexToSmallInt(PropertyValue) FROM Gateway.dbo.DeviceProperties WHERE DeviceID = @DeviceID AND PropertyID = '8048')
  END

IF (@TrackerVersion >= 6) -- eArrest Serial
  BEGIN
    SET @ExtBatteryFullVoltage = -1   -- There is no ExternalBattery on TP2's
    SET @ExtBatteryEmptyVoltage = -1
    SET @IntBatteryFullVoltage = 7900
    SET @IntBatteryEmptyVoltage = (SELECT Gateway.dbo.HexToSmallInt(PropertyValue) FROM Gateway.dbo.DeviceProperties WHERE DeviceID = @DeviceID AND PropertyID = '804C')
  END

-- // See if Event is in Bucket1 // --
IF(SELECT COUNT(EventPrimaryID) FROM rprtEventsBucket1 WHERE DeviceID = @DeviceID AND EventID = @EventID AND EventDateTime = @EventDateTime) > 0
    BEGIN
        SELECT   
		    Bucket1.OffenderName,  
		    Bucket1.EventNAme,     
		    Bucket1.DeviceID,   
		    Bucket1.EventTime,   
		    gwDevices.name AS devicename,  
		    Bucket1.trackerNumber AS devicenumber,  
		    Bucket1.GpsValidSatellites,  
		    Bucket1.latitude,  
		    Bucket1.longitude,  
		    gwEvents.Status,  
		    Bucket1.GpsValid,  
		    Bucket1.address,
		    gwEvents.ExternalBatteryVoltage,
		    gwEvents.InternalBatteryVoltage,
            @ExtBatteryFullVoltage AS ExtBatteryFullVoltage,
            @ExtBatteryEmptyVoltage AS ExtBatteryEmptyVoltage,
            @IntBatteryFullVoltage AS IntBatteryFullVoltage,
            @IntBatteryEmptyVoltage AS IntBatteryEmptyVoltage,
		    gwEvents.SignalStrength,
		    gwEvents.GpsSatellites,
		    gwEvents.Speed,
		    gwEvents.Heading
		FROM rprtEventsBucket1 Bucket1   
		    LEFT JOIN Gateway.dbo.Events gwEvents ON Bucket1.DeviceID = gwEvents.DeviceID
		                                          AND Bucket1.EventID = gwEvents.EventID 
		                                          AND Bucket1.EventTime = gwEvents.EventTime   
		    LEFT JOIN Gateway.dbo.Devices gwDevices ON Bucket1.DeviceID = gwDevices.DeviceID 
		WHERE Bucket1.DeviceID = @DeviceID
		  AND Bucket1.EventID = @EventID 
		  AND Bucket1.EventDateTime = @EventDateTime  
		ORDER BY Bucket1.EventTime DESC 
	END
ELSE
    -- // Event is in Bucket 2 // --
	BEGIN
		SELECT   
		    Bucket2.OffenderName,  
		    Bucket2.EventNAme,     
		    Bucket2.DeviceID,   
		    Bucket2.EventTime,   
		    gwDevices.name AS devicename,  
		    Bucket2.trackerNumber AS devicenumber,  
		    Bucket2.GpsValidSatellites,  
		    Bucket2.latitude,  
		    Bucket2.longitude,  
		    gwEvents.Status,  
		    Bucket2.GpsValid,  
		    Bucket2.address,
		    gwEvents.ExternalBatteryVoltage,
		    gwEvents.InternalBatteryVoltage,
            @ExtBatteryFullVoltage AS ExtBatteryFullVoltage,
            @ExtBatteryEmptyVoltage AS ExtBatteryEmptyVoltage,
            @IntBatteryFullVoltage AS IntBatteryFullVoltage,
            @IntBatteryEmptyVoltage AS IntBatteryEmptyVoltage,
		    gwEvents.SignalStrength,
		    gwEvents.GpsSatellites,
		    gwEvents.Speed,
		    gwEvents.Heading
		FROM rprtEventsBucket2 Bucket2   
		    LEFT JOIN Gateway.dbo.Events gwEvents ON Bucket2.DeviceID = gwEvents.DeviceID 
		                                          AND Bucket2.EventID = gwEvents.EventID 
		                                          AND Bucket2.EventTime = gwEvents.EventTime   
		    LEFT JOIN Gateway.dbo.Devices gwDevices ON Bucket2.DeviceID = gwDevices.DeviceID   
		WHERE Bucket2.DeviceID = @DeviceID 
		  AND Bucket2.EventID = @EventID 
		  AND Bucket2.EventDateTime = @EventDateTime    
	END

GO
GRANT EXECUTE ON [EventGetStatusDevice] TO [db_dml]
GO
